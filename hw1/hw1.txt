Problem 1.

	Part (a): Looking up information relevant to the course 
	online. Asking the course staff for help. Discussing high
	level ideas with a classmate so long as you do not break 
	the "Hearthstone Rule."


	Part (b): Raise an issue within 1 week of receiving the
	grade by Assigning the issue to your grader on GitHub. If 
	the problem is not resolved, then Go see a course TA if 
	assigning the issue to your grader did not resolve your 
	concern.


	Part (c): Eclipse, GNU emacs, Microsoft Visual Studio,
	sublime


	Part (d): Each student has 3 late days of which only one 
	can be used per HW.

	Part (e): Complete the online submission form as you would 
	for an on-time submission - except when you get to step 4,
	you confirm you are using a late date.

Problem 2. 

	Part (a): None of the GUI-based applications are supported. 
	Only through the git command line interface in the 
	course VM.


	Part (b): Avoid Cloning into a folder that itself is a git
	repo. 


	Part (c):
		1. git add hw1q2b.cpp
		2. git log -p -3


	Part (d): git will prompt the user for a message using the 
	default editior (in my case sublime). In order to properly 
	commit to the new files, the user must use the following 
	command: git commit -m "custom message here"


	Part (e): Go to the repository page of GitHub.com and click
	the green button entitled Clone/Download. Next, select clone
	with SSH and copy the provided link. Then go back to the VM
	terminal and input the following command: 
	git clone git@github.com:TTrojan/CSCI104.git 
	When prompted with an authencity question type yes and press 
	enter. Lastly start working with the repository by inputting 
	the following command: cd CSCI104

Problem 4.

	1. funcA(180) returns 15 or more specifically the sum of 2+2+3+3+5. 
	If we break down the factors of 180, we get 2, 2, 3, 3, and 5.
	Moreover the provided code functions recursively finds the factors 
	of the given input. 


	2. The call to funcA(n) always terminates as it is necessary to 
	start the process of finding the factors (begining with 2). 
	However, after catalyzing the operations of finding the factors, 
	funcA(n) delegates the other steps to funcB(n,2). 

	3. The output of funcA(n) is the sum of the factors of n. This is 
	accomplished by first checking if the input number is equal to 2,
	and if it checks the modularity. If there is not a remainder it 
	adds 2 to the recursively defined solution of funcB(n/2,2). If n
	modulo 2 has a remainder, the function adds 1 to the potential 
	factor (PF) (in this case 2) and starts the process over again  with 
	funcB(n, PF+1). Adding the factor PF to the solution of the 
	recursive call ( PF + funcB(n/PF, 2)) or adding to the potential 
	factor (n, PF+1), the cycle continues until PF is 
	equal to the n.

	

